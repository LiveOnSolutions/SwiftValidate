{
  "name": "Swiftvalidate",
  "tagline": "enhanced validation for swift",
  "body": "# SwiftValidate\r\n[![Build Status](https://travis-ci.org/dtop/SwiftValidate.svg)](https://travis-ci.org/dtop/SwiftValidate)\r\n[![Compatibility](https://img.shields.io/badge/Swift-2.1-blue.svg)](https://developer.apple.com/swift)\r\n[![DependencyManagement](https://img.shields.io/badge/CocoaPods-Compatible-brightgreen.svg)](https://cocoapods.org)\r\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\r\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/dtop/SwiftValidate/master/LICENSE)\r\n[![codebeat badge](https://codebeat.co/badges/e6b1e8da-2b4a-46b9-ad1d-9bdd057fbb58)](https://codebeat.co/projects/github-com-dtop-swiftvalidate)\r\n[![codecov.io](https://codecov.io/github/dtop/SwiftValidate/coverage.svg?branch=master)](https://codecov.io/github/dtop/SwiftValidate?branch=master)\r\n[![GitHub release](https://img.shields.io/github/release/dtop/SwiftValidate.svg)](https://github.com/dtop/SwiftValidate)\r\n##### enhanced validation for swift\r\n\r\nBy [Danilo Topalovic](http://blog.danilo-topalovic.de).\r\n\r\n\r\n\r\n* [Introduction]\r\n* [Requirements]\r\n* [Installation]\r\n* [Usage]\r\n* [Included Validators]\r\n  + [Required]\r\n  + [Empty]\r\n  + [StrLen]\r\n  + [Charset]\r\n  + [Alnum]\r\n  + [Email]\r\n  + [Regex]\r\n  + [Numeric]\r\n  + [Between]\r\n  + [GreaterThan]\r\n  + [SmallerThan]\r\n  + [DateTime]\r\n  + [DateBetween]\r\n  + [Callback]\r\n  + [InArray]\r\n* [Extensibility]\r\n\r\n\r\n### Introduction\r\n\r\nUnfortunately I did not find a fancy name for this software so I've called it what it is - a validator.\r\n\r\nHeavily inspired by [Zend\\Validate] and [Eureka] I started working on this component and I still add tests / validators.\r\nif you encounter any issues or bugs please feel free to report the bug or even write a test for this bug in order to be good again when the bug is solved.\r\n\r\nSee also the [ExampleProject]\r\n\r\nIf you are also missing a kind of filtering for form inputs see [SwiftFilter]\r\n\r\n## Requirements\r\n\r\n* iOS 8.0+\r\n* Xcode 7.0+\r\n\r\n## Installation\r\n\r\nSee [CocoaPods] for easy installation into your project\r\n\r\nAdd `SwiftValidate` to your `Podfile` like\r\n\r\n\r\n```\r\nplatform :ios, '8.0'\r\nuse_frameworks!\r\n\r\npod 'SwiftValidate'\r\n\r\n```\r\n\r\nOf course you can use it in [Carthage] as well\r\n\r\n```\r\ngithub \"dtop/SwiftValidate\"\r\n\r\n```\r\n\r\n## Usage\r\n\r\nAll validators are usable completely on their own but one of the main advantages of `SwiftValidate` is that the validators are chainable.\r\nAdd as many validators to a single chain as you need for properly validate your value.\r\n\r\n```swift\r\nlet validatorChain = ValidatorChain() {\r\n    $0.stopOnFirstError = true\r\n    $0.stopOnException = true\r\n} <~~ ValidatorRequired() {\r\n    $0.errorMessage = \"Enter the value!\"\r\n} <~~ ValidatorEmpty() {\r\n    $0.allowNil = false\r\n} <~~ ValidatorStrLen() {\r\n    $0.minLength = 3\r\n    $0.maxLength = 30\r\n    $0.errorMessageTooSmall = \"My fancy own error message\"\r\n}\r\n\r\nlet myValue = \"testValue\"\r\n\r\nlet result = validatorChain.validate(myValue, context: nil)\r\nlet errors = validatorChain.errors\r\n```\r\n\r\nIf you are dealing with a lot of values (e.g. a form result) you can easily predefine an ValidationIterator and add several chains linked to the form fields name to it.\r\n\r\nsee the extraction of the ValidationIteratorTests:\r\n\r\n```swift\r\n\r\n        // form values given by some user\r\n        let formResults: [String: Any?] = [\r\n            \"name\": \"John Appleseed\",\r\n            \"street\": \"1456 Sesame Street\",\r\n            \"zipcode\": \"01526\",\r\n            \"city\": \"Somewhere\",\r\n            \"country\": nil\r\n        ]\r\n        \r\n        let validationIterator = ValidationIterator() {\r\n            $0.resultForUnknownKeys = true\r\n        }\r\n        \r\n        // name, street, city\r\n        validationIterator.registerChain(\r\n            ValidatorChain() {\r\n                    $0.stopOnException = true\r\n                    $0.stopOnFirstError = true\r\n                }\r\n                <~~ ValidatorRequired()\r\n                <~~ ValidatorEmpty()\r\n                <~~ ValidatorStrLen() {\r\n                    $0.minLength = 3\r\n                    $0.maxLength = 50\r\n                },\r\n            forKeys: [\"name\", \"street\"]\r\n        )\r\n        \r\n        // zipcode\r\n        validationIterator.registerChain(\r\n            ValidatorChain() {\r\n                $0.stopOnException = true\r\n                $0.stopOnFirstError = true\r\n            }\r\n            <~~ ValidatorRequired()\r\n            <~~ ValidatorStrLen() {\r\n                $0.minLength = 5\r\n                $0.maxLength = 5\r\n            }\r\n            <~~ ValidatorNumeric() {\r\n                $0.allowString = true\r\n                $0.allowFloatingPoint = false\r\n            },\r\n            forKey: \"zipcode\"\r\n        )\r\n        \r\n        // country (not required but if present between 3 and 50 chars)\r\n        validationIterator.registerChain(\r\n            ValidatorChain() {\r\n                $0.stopOnException = true\r\n                $0.stopOnFirstError = true\r\n            }\r\n            <~~ ValidatorStrLen() {\r\n                $0.minLength = 3\r\n                $0.maxLength = 50\r\n            },\r\n            forKey: \"country\"\r\n        )\r\n        \r\n        \r\n        let validationResult = validationIterator.validate(formResults)\r\n        let cityInError = validationIterator.isInError(\"city\")\r\n\r\n```\r\n\r\n\r\nsee [WiKi] for more examples and explinations\r\n\r\n## Included Validators\r\n\r\n#### ValidatorRequired()\r\n\r\nSince all other validators allow nil from default setting, this validator can be added first to\r\ncheck the value is present.\r\nIt is also equipped with a callback where you can decide by value and context if the requiry is satisfied or not.\r\n\r\nConfiguration\r\n\r\n**Configuration**\r\n\r\n| value                  |  type     | default | description                       |\r\n|------------------------|:---------:|---------|-----------------------------------|\r\n| `requirementCondition` |  closure  | ?       | optional custom requirement check |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessage` - error message if value is nil\r\n\r\n---\r\n#### ValidatorEmpty()\r\n\r\nTests if the given value is not an empty string\r\n\r\n**Configuration**\r\n\r\n| value          |  type  | default | description                     |\r\n|----------------|:------:|---------|---------------------------------|\r\n| `allowNil`     |  Bool  | true    | value can be nil                |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessage` - error message if value is empty\r\n\r\n---\r\n#### ValidatorStrLen()\r\n\r\nTests if a given value is between min and max in strlen\r\n\r\n**Configuration**\r\n\r\n| value          | type | default | description                |\r\n|----------------|:----:|---------|----------------------------|\r\n| `allowNil`     | Bool | true    | value an be nil            |\r\n| `minLength`    |  Int | 3       | minimum length of string   |\r\n| `maxLength`    |  Int | 30      | maximum length of string   |\r\n| `minInclusive` | Bool | true    | minimum inclusive in value |\r\n| `maxInclusive` | Bool | true    | maximum inclusive in value |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageTooSmall: String` - error message if string is not long enaugh\r\n+ `errorMessageTooLarge: String`- error message if string is too long\r\n\r\n---\r\n#### ValidatorCharset()\r\n\r\nValidates that the given value contains only chars from the given character set\r\n\r\n**configuration**\r\n\r\n| value        | type           | default | description        |\r\n|--------------|:--------------:|---------|--------------------|\r\n| `allowNil`   | Bool           | true    | value an be nil    |\r\n| `allowEmpty` | Bool           | false   | value can be empty |\r\n| `charset`    | NSCharacterSet | !       | charset to compare |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageStringDoesNotFit: String` - (optional)\r\n\r\n---\r\n### ValidatorAlnum()\r\n\r\nValidates if the given value consists of alpha numerical chars only\r\n\r\n```\r\nThis is a specialization of ValidatorCharset()\r\n```\r\n\r\n---\r\n#### ValidatorEmail()\r\n\r\nValidates a given email address\r\n\r\n**Configuration**\r\n\r\n| value                    | type | default | description                                             |\r\n|--------------------------|:----:|---------|---------------------------------------------------------|\r\n| `allowNil`               | Bool | true    | value an be nil                                         |\r\n| `validateLocalPart`      | Bool | true    | the local part of the mail address will be validated    |\r\n| `validateHostnamePart`   | Bool | true    | the hostname part of the mail address will be validated |\r\n| `validateTopLevelDomain` | Bool | true    | the address has to have a topleveldomain                |\r\n| `strict`                 | Bool | true    | the length of the parts will also be validated          |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageInvalidAddress` - address is invalid\r\n+ `errorMessageInvalidLocalPart` - the local part (before @) is invalid\r\n+ `errorMessageInvalidHostnamePart` - the hostname is invalid\r\n+ `errorMessagePartLengthExceeded` - a part is exceeding its length\r\n\r\n---\r\n#### ValidatorRegex()\r\n\r\nValidates a given string against a user definded regex\r\n\r\n| value             |            type            | default | description                        |\r\n|-------------------|:--------------------------:|---------|------------------------------------|\r\n| `allowNil`        |            Bool            | true    | nil is allowed                     |\r\n| `pattern`         |           String           | -       | the pattern to match against       |\r\n| `options`         | NSRegularExpressionOptions | 0       | options for the regular expression |\r\n| `matchingOptions` |      NSMatchingOptions     | 0       | options for the matching           |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageValueIsNotMatching` - value does not match teh given pattern\r\n\r\n---\r\n#### ValidatorNumeric()\r\n\r\nValidates if the given value is a valid number\r\n\r\n**Configuration**\r\n\r\n| value                |        type       | default | description                        |\r\n|----------------------|:-----------------:|---------|------------------------------------|\r\n| `allowNil`           |        Bool       | true    | nil is allowed                     |\r\n| `allowString`        |        Bool       | true    | value can be a numerical string    |\r\n| `allowFloatingPoint` |        Bool       | true    | value can be a floatingpoint value |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageNotNumeric` - value is not numeric\r\n\r\n---\r\n#### ValidatorBetween()\r\n\r\nValidates if a numerical value is between 2 predefined values\r\n\r\nGeneric:\r\n\r\n```swift\r\nlet validator = ValidatorBetween<Double>() {\r\n    $0.minValue = 1.0\r\n    $0.maxValue = 99.1\r\n}\r\n```\r\n\r\n**Configuration**\r\n\r\n| value          | type | default | description                               |\r\n|----------------|:----:|---------|-------------------------------------------|\r\n| `allowNil`     | Bool | true    | nil is allowed                            |\r\n| `allowString`  | Bool | true    | value can be a numerical string           |\r\n| `minValue`     | TYPE | 0       | the minimum value                         |\r\n| `maxValue`     | TYPE | 0       | the maximum value                         |\r\n| `minInclusive` | Bool | true    | minimum value inclusive (>= instead of >) |\r\n| `maxInclusive` | Bool | true    | maximum value inclusive                   |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageInvalidType` - invalid type given [-should be thrown-]\r\n+ `errorMessageNotBetween` - value is not between the predefined values\r\n\r\n---\r\n#### ValidatorGreaterThan()\r\n\r\nValidates if the given value is greater than the predefined one\r\n\r\nGeneric:\r\n\r\n```swift\r\nlet validator = ValidatorGreaterThan<Double>() {\r\n    $0.min = 1.0\r\n}\r\n```\r\n\r\n**Configuration**\r\n\r\n| value          | type | default | description                               |\r\n|----------------|:----:|---------|-------------------------------------------|\r\n| `allowNil`     | Bool | true    | nil is allowed                            |\r\n| `min`          | TYPE | 0       | the value that needs to be exceeded       |\r\n| `inclusive`    | Bool | true    | value itself inclusive                    |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageInvalidType` - invalid type given [-should be thrown-]\r\n+ `errorMessageNotGreaterThan` - value is not great enaugh\r\n\r\n---\r\n#### ValidatorSmallerThan()\r\n\r\nValidates if the given value is smaller than the predefined one\r\n\r\nGeneric:\r\n\r\n```swift\r\nlet validator = ValidatorSmallerThan<Double>() {\r\n    $0.max = 10.0\r\n}\r\n```\r\n\r\n**Configuration**\r\n\r\n| value          | type | default | description                               |\r\n|----------------|:----:|---------|-------------------------------------------|\r\n| `allowNil`     | Bool | true    | nil is allowed                            |\r\n| `max`          | TYPE | 0       | the value that needs to be exceeded       |\r\n| `inclusive`    | Bool | true    | value itself inclusive                    |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageInvalidType` - invalid type given [-should be thrown-]\r\n+ `errorMessageNotSmallerThan` - value is not small enaugh\r\n\r\n---\r\n#### ValidatorDateTime()\r\n\r\nValidates if the given date is a valid one\r\n\r\n**Configuration**\r\n\r\n| value          | type   | default | description                               |\r\n|----------------|:------:|---------|-------------------------------------------|\r\n| `allowNil`     | Bool   | true    | nil is allowed                            |\r\n| `dateFormat`   | String | 0       | the date format to be parsed              |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageInvalidDate` - invalid date given\r\n\r\n---\r\n#### ValidatorDateBetween()\r\n\r\nValidates if the given date (NSDate or String) is between the predefined dates\r\n\r\n**Configuration**\r\n\r\n| value           |       type      | default | description                                                 |\r\n|-----------------|:---------------:|---------|-------------------------------------------------------------|\r\n| `allowNil`      |       Bool      | true    | nil is allowed                                              |\r\n| `min`           |      NSDate     | !       | minimum date                                                |\r\n| `max`           |      NSDate     | !       | maximum date                                                |\r\n| `minInclusive`  | Bool            | true    | minimum value inclusive (>= instead of >)                   |\r\n| `maxInclusive`  | Bool            | true    | maximum value inclusive                                     |\r\n| `dateFormatter` | NSDateFormatter | !       | date formatter for parsing the string if string is expected |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageNotBetween` - Date is not between the predefined ones\r\n\r\n---\r\n#### ValidatorCallback()\r\n\r\nExecutes the given callback and works with the results\r\n\r\n**Configuration**\r\n\r\n| value          | type     | default | description                               |\r\n|----------------|:--------:|---------|-------------------------------------------|\r\n| `allowNil`     | Bool     | true    | nil is allowed                            |\r\n| `callback`     | closure  | !       | the callback to validate with             |\r\n\r\nCallback be like:\r\n\r\n```swift\r\nlet validator = ValidatorCallback() {\r\n    $0.callback = {(validator: ValidatorCallback, value: Any?, context: [String : Any?]?) in\r\n        \r\n        if nil == value {\r\n            /// you can throw\r\n            throw NSError(domain: \"my domain\", code: 1, userInfo: [NSLocalizedDescriptionKey: \"nil!!\"])\r\n        }\r\n        \r\n        return (false, \"My Error Message\")\r\n        /// return (true, nil)\r\n    }\r\n}\r\n```\r\n\r\n---\r\n#### ValidatorInArray()\r\n\r\nValidates that the given value is contained in the predefined array\r\n\r\nGeneric:\r\n\r\n```swift\r\nlet validator = ValidatorInArray<String>() {\r\n    $0.array = [\"Andrew\", \"Bob\", \"Cole\", \"Dan\", \"Edwin\"]\r\n}\r\n\r\nlet validator = ValidatorInArray<Double>() {\r\n    $0.allowNil = false\r\n    $0.array = [2.4, 3.1, 9.8, 4.9, 2.0]\r\n}\r\n```\r\n\r\n**Configuration**\r\n\r\n| value          | type     | default | description                               |\r\n|----------------|:--------:|---------|-------------------------------------------|\r\n| `allowNil`     | Bool     | true    | nil is allowed                            |\r\n| `array`        | [TYPE]   | []      | the array with predefined values          |\r\n\r\n**Error Messages**\r\n\r\n+ `errorMessageItemIsNotContained` - given value is not contained in the array\r\n\r\n\r\n# Extensibility\r\n\r\nNon generic:\r\n\r\n```swift\r\nclass MyValidator: BaseValidator, ValidatorProtocol {\r\n\r\n    required public init(@noescape _ initializer: MyValidator -> () = { _ in }) {\r\n        super.init()\r\n        initializer(self)\r\n    }\r\n    \r\n    override func validate<T: Any>(value: T?, context: [String: Any?]?) throws -> Bool {\r\n        /// ...\r\n    }\r\n}\r\n```\r\n\r\nGeneric:\r\n\r\n```swift\r\nclass MyGenericValidator<TYPE where TYPE: Equatable>: ValidatorProtocol, ValidationAwareProtocol {\r\n\r\n    required public init(@noescape _ initializer: MyGenericValidator -> () = { _ in }) {\r\n        initializer(self)\r\n    }\r\n\r\n    public func validate<T: Any>(value: T?, context: [String: Any?]?) throws -> Bool {\r\n        /// ...\r\n    }\r\n}\r\n```\r\n\r\n<!--- References -->\r\n\r\n[Eureka]: https://github.com/xmartlabs/Eureka\r\n[Zend\\Validate]: https://github.com/zendframework/zend-validator\r\n[CocoaPods]: https://cocoapods.org\r\n[Carthage]: https://github.com/Carthage/Carthage\r\n[WiKi]: https://github.com/dtop/SwiftValidate/wiki\r\n[ExampleProject]: https://github.com/dtop/swift-validate-example\r\n[SwiftFilter]: https://github.com/dtop/SwiftFilter\r\n\r\n[Introduction]: #introduction\r\n[Requirements]: #requirements\r\n[Installation]: #installation\r\n[Usage]: #usage\r\n[Included Validators]: #included-validators\r\n[Required]: #validatorrequired\r\n[Empty]: #validatorempty\r\n[StrLen]: #validatorstrlen\r\n[Charset]: #validatorcharset\r\n[Alnum]: #validatoralnum\r\n[Email]: #validatoremail\r\n[Regex]: #validatorregex\r\n[Numeric]: #validatornumeric\r\n[Between]: #validatorbetween\r\n[GreaterThan]: #validatorgreaterthan\r\n[SmallerThan]: #validatorsmallerthan\r\n[DateTime]: #validatordatetime\r\n[DateBetween]: #validatordatebetween\r\n[Callback]: #validatorcallback\r\n[InArray]: #validatorinarray\r\n[Extensibility]: #extensibility\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}